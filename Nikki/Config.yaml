# 全局配置
disable-keep-alive: false                             # 禁用 TCP Keep Alive, 在 Android 默认为 true
keep-alive-interval: 15                               # TCP Keep Alive包的间隔,减少移动设备耗电问题,默认15秒
keep-alive-idle: 300                                  # TCP Keep Alive空闲超时,默认600秒
unified-delay: true                                   # 统一延迟
tcp-concurrent: false                                 # TCP 并发,如果域名解析结果对应多个IP,并发请求所有IP,选择握手最快的IP进行通讯
find-process-mode: off                                # 进程匹配: always强制匹配 | strict自动匹配 | off不匹配进程(路由器推荐)

# GEOIP地址库配置
geodata-mode: true                                    # GEOIP数据模式,更改geoip使用文件,mmdb或者dat,可选,true为dat
geodata-loader: standard                              # GEO 文件加载模式 standard 标准 | memconservative 小内存(默认值)
geo-auto-update: true                                 # 自动更新 GEO 是否启用,可选 true/false 
geo-update-interval: 72                               # 更新间隔,单位小时
geox-url:                                             # 自定义GEO下载地址 https://github.com/Loyalsoldier/geoip/release
  geoip: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  geosite: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country-lite.mmdb"
  asn: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 指定UA
global-client-fingerprint: chrome                     # 全局客户端指纹
global-ua: "clash.meta"                               # 全局UA,可选"Mozilla/5.0; AppleWebKit/537.36; Chrome/91.0.4472.114; Safari/537.36; Shadowrocket/1.9.7; meta/1.0.0; Sing/1.1.0"

# API面板配置
#external-controller-tls: 0.0.0.0:9443                 # HTTPS-API监听地址,需要配置TLS部分证书和其私钥配置,使用TLS也必须填写external-controller
#tls:                                                  # TLS 目前仅用于 API 的 https
#  certificate: "./tls/api.crt"                        # 证书 PEM 格式,或者 证书的路径
#  private-key: "./tls/api.key"                        # 证书对应的私钥 PEM 格式,或者私钥路径

# 策略缓存和fakeip缓存
profile:
  store-selected: true                                # 储存API对策略组的选择,以供下次启动时使用
  store-fake-ip: true                                 # fake-ip缓存,域名再次发生连接时,使用原有映射地址

# 流量嗅探
sniffer:
  enable: true                                        # 是否启用,可选 true/false
  force-dns-mapping: true                             # 对 Redir-host 类型识别的流量进行强制嗅探
  parse-pure-ip: true                                 # 对所有未获取到域名的流量进行强制嗅探
  override-destination: true                          # 是否使用嗅探结果作为实际访问，默认为 true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true                      # 可覆盖全局override-destination
    TLS:                                              # TLS 端口配置, 如果不配置 ports 默认嗅探 443
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:                                        # 需要跳过嗅探的域名,主要解决部分站点sni字段非域名,导致嗅探结果异常的问题,如米家设备
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "GEOSITE,CN"
    - "+.push.apple.com"
    - "+.apple.com"
    - "+.wechat.com"
    - "+.qpic.cn"
    - "+.qq.com"
    - "+.wechatapp.com"
    - "+.vivox.com"
    - "+.oray.com"
    - "+.sunlogin.net"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"

# DNS模块
dns:
  enable: true                                        # 关闭将使用系统 DNS
  enhanced-mode: redir-host                           # DNS 模式: redir-host / fake-ip
  fake-ip-range: 28.0.0.0/8                           # fakeip 下的 IP 段设置 198.18.0.0/16 28.0.0.1/8
  prefer-h3: false                                    # 是否开启 DoH 支持 HTTP/3，将并发尝试
  respect-rules: true                                 # 遵循分流规则,DNS查询走相应代理
  listen: 0.0.0.0:1053                                # 开启 DNS 服务器监听
  ipv6: true                                          # false将返回AAAA的空结果
  fake-ip-filter-mode: blacklist                      # fake-ip匹配模式,默认为blacklist,即如果匹配成功不返回fake-ip,可设置为whitelist，即只有匹配成功才返回fake-ip
  fake-ip-filter:                                     # fakeip 过滤,以下地址不会下发 fakeip 映射用于连接
    - "*"
    - "+.lan"
    - "+.invalid.*"
    - "+.local.*"
    - "+.arpa"
    - "+.localhost"
    - "geosite:private,cn"
  default-nameserver:                            ###### 只用于解析 nameserver 中域名格式的 DNS 服务器,可使用 UDP/DoT/DoH,只能使用纯 IP 地址
    - "180.184.1.1"                                   # TrafficRoute DNS IPv4
    - "119.29.29.29"                                  # DNSPod IPv4
    - "180.184.2.2"                                   # TrafficRoute DNS IPv4
    - "223.5.5.5"                                     # Alibaba IPv4
    - "223.6.6.6"                                     # Alibaba IPv4
#    - "2400:3200::1"                                  # Alibaba IPv6
#    - "2400:3200:baba::1"                             # Alibaba IPv6
  nameserver-policy:                             ###### 使用指定的 DNS 服务器,优先于 nameserver/fallback 查询
    "geosite:private,cn":                             # 指定国内 DNS 服务器
    - "180.184.1.1"                                   # TrafficRoute DNS IPv4
    - "180.184.2.2"                                   # TrafficRoute DNS IPv4
    - "223.5.5.5"                                     # Alibaba IPv4
    - "223.6.6.6"                                     # Alibaba IPv4
#    - "119.29.29.29"                                  # DNSPod IPv4
#    - "2400:3200::1"                                  # Alibaba IPv6
#    - "2400:3200:baba::1"                             # Alibaba IPv6
  direct-nameserver:                             ###### 直连DNS
    - "180.184.1.1"                                   # 字节DNS1 IPv4
    - "180.184.2.2"                                   # 字节DNS2 IPv4
    - "223.5.5.5"                                     # Alibaba IPv4
    - "223.6.6.6"                                     # Alibaba IPv4
#    - "119.29.29.29"                                  # DNSPod IPv4
#    - "114.114.114.114"                               # 114 DNS IPv4
#    - "2400:3200::1"                                  # Alibaba IPv6
#    - "2400:3200:baba::1"                             # Alibaba IPv6
  nameserver:                                    ###### 除 nameserver-policy 指定规则外的所有域名都由 nameserver 解析
    - "https://8.8.4.4/dns-query"                     # Google DNS IPv4 DoH
    - "https://1.0.0.1/dns-query"                     # Cloudflare IPv4 DoH
    - "https://8.8.8.8/dns-query"                     # Google DNS IPv4 DoH
    - "https://1.1.1.1/dns-query"                     # Cloudflare IPv4 DoH
#    - "https://[2001:4860:4860::8844]/dns-query"      # Google DNS IPv6 DoH
#    - "https://[2606:4700:4700::1111]/dns-query"      # Cloudflare IPv6 DoH
#    - "https://[2001:4860:4860::8888]/dns-query"      # Google DNS IPv6 DoH
#    - "https://[2606:4700:4700::1001]/dns-query"      # Cloudflare IPv6 DoH
  proxy-server-nameserver:                       ###### 仅用于解析代理节点的域名,配置服务器若查询失败将使用 nameserver,非并发查询
    - "https://8.8.4.4/dns-query"                     # Google DNS IPv4 DoH
    - "https://1.0.0.1/dns-query"                     # Cloudflare IPv4 DoH
    - "https://8.8.8.8/dns-query"                     # Google DNS IPv4 DoH
    - "https://1.1.1.1/dns-query"                     # Cloudflare IPv4 DoH
    - "https://223.5.5.5/dns-query"                   # Alibaba IPv4 DoH
 #   - "https://[2001:4860:4860::8844]/dns-query"      # Google DNS IPv6 DoH
 #   - "https://[2606:4700:4700::1111]/dns-query"      # Cloudflare IPv6 DoH
 #   - "https://[2001:4860:4860::8888]/dns-query"      # Google DNS IPv6 DoH
 #   - "https://[2606:4700:4700::1001]/dns-query"      # Cloudflare IPv6 DoH

# 机场列表
p: &p {type: http, health-check: {enable: true, url: "https://www.gstatic.com/generate_204", interval: 120, timeout: 2000, lazy: true}, exclude-filter: "(?i)回国|安徽|北京|重庆|福建|甘肃|广东|广西|贵州|海南|河北|黑龙江|河南|湖北|湖南|吉林|江苏|江西|辽宁|内蒙古|宁夏|青海|山东|山西|陕西|上海|四川|天津|西藏|新疆|云南|浙江"}
proxy-providers: # 🏠 ⏳
  ✈️聚合订阅: {interval: 86400, url: "https://gh-proxy.com/https://raw.githubusercontent.com/barry-far/V2ray-Configs/refs/heads/main/Splitted-By-Protocol/ss.txt", override: {skip-cert-verify: true, udp: true, ip-version: ipv6-prefer, additional-prefix: ""}, <<: *p}

# 节点
proxies: 
  - { name: "🟢 直连", type: direct, udp: true, hidden: true}
  - { name: "⛔ 拦截", type: reject, hidden: true}
  - { name: "⭕ DNS劫持", type: dns, hidden: true}

# 代理组 
pr: &pr {type: select, proxies: [♻️ 自动故转,🇧 BPB节点,🇺🇲 美国节点,🔶 新日韩节点,🔷 港台节点,🇷🇺 俄罗斯节点,🔔 其他地区,🟢 直连]}
url-test: &url-test {type: url-test, interval: 40, tolerance: 70}
proxy-groups:  
  - {name: ♻️ 自动故转, type: fallback, proxies: [🇧 BPB节点,🇺🇲 美国节点,🔶 新日韩节点,🇷🇺 俄罗斯节点,🔔 其他地区], lazy: true, interval: 20, timeout: 2000, max-failed-times: 2, url: "https://www.gstatic.com/generate_204"} 
  - {name: 🎞️ 视频媒体, <<: *pr}
  - {name: 🔒 TikTok, <<: *pr}
  - {name: 👽 OpenAI, <<: *pr}
  - {name: Ⓜ️ MicorSoft, <<: *pr}
  - {name: 🇬 Google, <<: *pr}
  - {name: 🍎 Apple, <<: *pr}
  - {name: 💳 PayPal, <<: *pr}
  - {name: 📝 GitHub, <<: *pr}
  - {name: 🇵 PornHub, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🚀 SpeedTest, <<: *pr}
  - {name: 💠 出国代理, <<: *pr}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 📢 广告过滤, type: select, proxies: [⛔ 拦截,🚫 丢弃,⚪ 绕过]}
# 地区分组
  - {name: 🇧 BPB节点, <<: *url-test, include-all: true, filter: "(?i)^(?=.*(BPB))((?!(直连|DIRECT|拦截|REJECT|DNS劫持|公益|扫码)).)*$"}
  - {name: 🇺🇲 美国节点, <<: *url-test, include-all: true, filter: "(?i)^(?=.*(美|US|States|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥))((?!(BPB|自建|直连|DIRECT|拦截|REJECT|DNS劫持|中转|家宽|游戏|剩余|流量|0.5|0.5倍|0.5x|2.0|2倍|2x|3.0|3倍|3x|4.0|4倍|4x|5.0|5倍|5x)).)*$"}
  - {name: 🔶 新日韩节点, <<: *url-test, include-all: true, filter: "(?i)^(?=.*(坡|SG|Singapore|狮城|日|JP|Japan|韩|KR|Korea))^((?!(自建|直连|DIRECT|拦截|REJECT|DNS劫持|中转|家宽|游戏|剩余|流量|0.5|0.5倍|0.5x|2.0|2倍|2x|3.0|3倍|3x|4.0|4倍|4x|5.0|5倍|5x)).)*$"}
  - {name: 🔷 港台节点, <<: *url-test, include-all: true, filter: "(?i)^(?=.*(港|HK|Hong|台|TW|Taiwan))((?!(US|自建|直连|DIRECT|拦截|REJECT|DNS劫持|中转|家宽|游戏|剩余|流量|0.5|0.5倍|0.5x|2.0|2倍|2x|3.0|3倍|3x|4.0|4倍|4x|5.0|5倍|5x)).)*$"}
  - {name: 🇷🇺 俄罗斯节点, <<: *url-test, include-all: true, filter: "(?i)^(?=.*(俄|RU|Russian))((?!(自建|直连|DIRECT|拦截|REJECT|DNS劫持|扫码|中转|家宽|游戏|剩余|流量|0.5|0.5倍|0.5x|2.0|2倍|2x|3.0|3倍|3x|4.0|4倍|4x|5.0|5倍|5x)).)*$"}
  - {name: 🔔 其他地区, <<: *url-test, include-all: true, filter: "(?i)^(?!.*(?:美|US|States|港|HK|Hong|台|TW|Taiwan|坡|SG|Singapore|狮城|日|JP|Japan|韩|KR|Korea|俄|RU|Russian|自建|直连|DIRECT|拦截|REJECT|DNS劫持)).*$"}
# 特殊节点  
  - {name: 🚫 丢弃, type: select, proxies: [REJECT-DROP], hidden: true}
  - {name: ⚪ 绕过, type: select, proxies: [PASS], hidden: true}

# 分流规则
rules:    
  - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOSITE,CN))),REJECT-DROP          # 除中国外的 QUIC
  - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOIP,CN))),REJECT-DROP            # 除中国外的 QUIC
  - AND,(AND,(DST-PORT,500),(NETWORK,UDP)),DIRECT                                    # 放行WiFi-Calling
  - AND,(AND,(DST-PORT,4500),(NETWORK,UDP)),DIRECT                                   # 放行WiFi-Calling
  - AND,(AND,(DST-PORT,123),(NETWORK,UDP)),DIRECT                                    # 放行NTP
  - RULE-SET,封锁列表,⛔ 拦截
  - GEOSITE,private,🟢 直连
  - GEOIP,private,🟢 直连,no-resolve
 # 广告过滤
  - GEOSITE,category-ads-all,📢 广告过滤
  - RULE-SET,BanAD,📢 广告过滤
  - RULE-SET,BanProgramAD,📢 广告过滤
  - RULE-SET,BanEasyListChina,📢 广告过滤
  - RULE-SET,AWAvenue-Ads,📢 广告过滤
  - RULE-SET,直连列表,🟢 直连
  - RULE-SET,代理列表,💠 出国代理
 # 分类规则 
  - RULE-SET,OpenAI,👽 OpenAI
  - RULE-SET,Github,📝 GitHub
  - RULE-SET,Telegram,📲 Telegram
  - RULE-SET,Youtube,🎞️ 视频媒体
  - RULE-SET,Netflix,🎞️ 视频媒体
  - RULE-SET,TikTok,🔒 TikTok
  - RULE-SET,PornHub,🇵 PornHub
  - RULE-SET,BiliBili,🟢 直连
  - RULE-SET,Micorsoft,Ⓜ️ MicorSoft
  - RULE-SET,Apple,🍎 Apple
  - RULE-SET,PayPal,💳 PayPal
  - RULE-SET,Google,🇬 Google
  - RULE-SET,SpeedTest,🚀 SpeedTest
 # 兜底规则
  - GEOSITE,geolocation-!cn,💠 出国代理
  - GEOSITE,category-scholar-!cn,💠 出国代理
  - RULE-SET,GFW列表,💠 出国代理
  - GEOSITE,category-games@cn,🟢 直连
  - GEOIP,CN,🟢 直连,no-resolve
  - GEOSITE,cn,🟢 直连
  - MATCH,🐟 漏网之鱼

# 订阅规则集
rule-anchor:
  ip: &ip {behavior: ipcidr, type: http, interval: 86400, format: mrs}
  domain: &domain {behavior: domain, type: http, interval: 86400, format: mrs}
  classic: &classic {behavior: classical, type: http, interval: 86400, format: text}
  yaml: &yaml {behavior: domain, type: http, interval: 86400, format: yaml}
rule-providers: 
  封锁列表: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/psqtdhx/Config/refs/heads/main/rules-dat/Block.list" }
  直连列表: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/psqtdhx/Config/refs/heads/main/rules-dat/Direct.list" }
  代理列表: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/psqtdhx/Config/refs/heads/main/rules-dat/Proxy.list" }
  GFW列表: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
 # 广告过滤
  BanAD: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list" }
  BanProgramAD: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list" }
  BanEasyListChina: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list" }
 # 秋风广告拦截规则 https://awavenue.top
  AWAvenue-Ads: { <<: *yaml, url: "https://gh-proxy.com/https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/refs/heads/main/Filters/AWAvenue-Ads-Rule-Clash.yaml" }
 # OpenAI
  OpenAI: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/OpenAI/OpenAI.list" }
 # 流媒体
  Youtube: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/YouTube/YouTube.list" }
  Netflix: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Netflix/Netflix.list" }
  TikTok: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/TikTok/TikTok.list" }
  BiliBili: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/BiliBili/BiliBili.list" }
  PornHub: { <<: *domain, url: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-porn.mrs" }
 # 电报消息
  Telegram: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Telegram/Telegram.list" }
 # 微软服务
  Micorsoft: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Microsoft/Microsoft.list" }
 # 谷歌服务
  Google: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Google/Google.list" }
 # PayPal
  PayPal: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
 # Apple
  Apple: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Apple/Apple.list" }
 # GitHub
  Github: { <<: *classic, url: "https://gh-proxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/GitHub/GitHub.list" }
 # SpeedTest
  SpeedTest: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
